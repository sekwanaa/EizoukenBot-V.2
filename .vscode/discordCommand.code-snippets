{
	// Place your Discord Bot V2 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Discord Command": {
		"scope": "javascript",
		"prefix": "dcmd",
		"body": [
			"const { SlashCommandBuilder } = require('discord.js');\n",
			"module.exports = {\n",
			"\tdata: new SlashCommandBuilder()\n\t.setName('$1')$2,\n",
			"\tasync execute(interaction) {\n\t\t$0\n\t},",
			"};"

		],
		"description": "discord command builder"
	},
	"Discord Context Command": {
		"scope": "javascript",
		"prefix": "dctxt",
		"body": [
			"const { ContextMenuCommandBuilder, ApplicationCommandType, EmbedBuilder } = require('discord.js');\n",
			"module.exports = {\n",
			"\tdata: new ContextMenuCommandBuilder()\n\t.setName('$1').setType(ApplicationCommandType.$2),\n",
			"\tasync execute(interaction) {\n\t\tconst target = interaction.targetUser\n\t\t$0\n\t},",
			"};"
		],
		"description": "discord context command builder"
	},
	"Discord Event": {
		"scope": "javascript",
		"prefix": "devt",
		"body": [
			"$2\n\nmodule.exports = {",
			"\tname: '$1',",
			"\tonce: false,",
			"\tasync execute(interaction) {\n\t\t$0\n\t},",
			"};"

		],
		"description": "discord client event builder"
	},
	"Discord Data": {
		"scope": "javascript",
		"prefix": "ddata",
		"body": [
			"const mongoCollection = require('../config/mongoCollection')",
			"\n\nlet exportedMethods = {",
			"\tasync $1($2) {",
			"\t\t$0",
			"\t}",
			"};",
			"\nmodule.exports = exportedMethods"
		]
	}
	
}